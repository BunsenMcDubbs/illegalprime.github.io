<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Michael Eden</title>
 <link href="https://illegalprime.github.io//atom.xml" rel="self"/>
 <link href="https://illegalprime.github.io//"/>
 <updated>2014-08-06T00:48:26-05:00</updated>
 <id>https://illegalprime.github.io/</id>
 <author>
   <name>Michael Eden</name>
   <email></email>
 </author>

 
 <entry>
   <title>Bitshifts &amp; Safetybelts</title>
   <link href="https://illegalprime.github.io//blog/bitshifts-n-safetybelts"/>
   <updated>2014-08-04T00:00:00-05:00</updated>
   <id>https://illegalprime.github.io//blog/bitshifts-n-safetybelts</id>
   <content type="html">&lt;h1&gt;The Steganographic Way&lt;/h1&gt;

&lt;p&gt;Look at this picture of Andy, do you see a hidden message?&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/media/2014-08-04-stickshifts-n-safetybelts/andy-encoded.png&quot; alt=&quot;The text &#39;Hello World!&#39; is encoded into this image.&quot; /&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;The text &#39;Hello World!&#39; is encoded into this image.&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&amp;#39;Hello World!&amp;#39; is able to live inside that image using one common method of Steganography: &amp;quot;the art or practice of concealing a message, image, or file within another message, image, or file&amp;quot;&lt;a href=&quot;http://en.wikipedia.org/wiki/Steganography&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To visualize this hiding we first transform the message into binary (using &lt;a href=&quot;http://en.wikipedia.org/wiki/Unicode&quot;&gt;Unicode&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;        &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;                       &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0100&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0110&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0101&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;                       &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0110&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1100&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0110&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1100&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;                       &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; 
&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0110&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1111&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0010&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;                       &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;                       
&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0101&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0111&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0110&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1111&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;                       &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0111&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0010&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0110&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1100&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;                       &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0110&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0100&lt;/span&gt;     &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0010&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The idea here is to take all the bits and place each of them on one pixel of the image. Since there are 192 bits (count them!) we will need a image file that is &lt;em&gt;at least&lt;/em&gt; 192 pixels. Good thing our picture of Andy is 496 x 274 = 135904 pixels! This gives you an idea of exactly how much you can fit into Andy.&lt;/p&gt;

&lt;p&gt;So where in the pixel do we put this bit?? Well each pixel in an image must be a fixed number of bits long (so computers can read the image correctly), so we cannot just squeeze this bit in between the bits of the pixel. No, the only other option is to &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pick a bit in the pixel&lt;/li&gt;
&lt;li&gt;Remove this bit&lt;/li&gt;
&lt;li&gt;Replace it with a bit from the message&lt;/li&gt;
&lt;li&gt;Repeat until all message bits are in pixels&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To change the color of the pixel the least (to make our efforts the more inconspicuous) we are going to peel of the LSB (least significant bit) from the image. Here&amp;#39;s a visual:&lt;/p&gt;

&lt;table&gt;
&lt;th&gt;
    &lt;td&gt;
        Before
    &lt;/td&gt;
    &lt;td&gt;
        After
    &lt;/td&gt;
&lt;/th&gt;
&lt;tr&gt;
    &lt;td&gt;
        Replacing the most significant bit (left most)
    &lt;/td&gt;
    &lt;td style=&quot;background-color:#0000FF;&quot;&gt;&lt;/td&gt;
    &lt;td style=&quot;background-color:#8000FF;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Binary:&lt;/td&gt;
    &lt;td&gt;
        000000000000000011111111
    &lt;/td&gt;
    &lt;td&gt;
        100000000000000011111111
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
        Replacing the least significant bit (right most)
    &lt;/td&gt;
    &lt;td style=&quot;background-color:#0000FF;&quot;&gt;&lt;/td&gt;
    &lt;td style=&quot;background-color:#0000FE;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Binary:&lt;/td&gt;
    &lt;td&gt;
        000000000000000011111111
    &lt;/td&gt;
    &lt;td&gt;
        000000000000000011111110
    &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Of course there is a 50% chance that the bit we remove and the bit we replace will coincidentally be the same. In this case literally nothing is changed for that pixel.&lt;/p&gt;

&lt;h1&gt;The Code&lt;/h1&gt;

&lt;p&gt;I&amp;#39;ve, after learning about this method, written a program to automate the process. In it though I have reserved the first 32 pixels to tell the program how long the message is so it will know how much of the image to decode.&lt;/p&gt;

&lt;p&gt;Written in C++ &amp;amp; Qt, the code starts by creating a copy of the image so the copy can be changed and encoded. It then initializes x and y, which represent the coordinates of the image: (0, 0) means top left. Finally it gets the message length to encode into the first 32 pixels of the image.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span class=&quot;n&quot;&gt;QImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encodeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;QImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitsPerPixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then we have this ugly thing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This loop initializes &lt;code&gt;mask&lt;/code&gt; to equal 1. Then each pass of the loop shifts all the bits in mask to the left then saves that value back to mask. A quick reminder on what left bit shift is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//      mask = 0 ...23 0&amp;#39;s... 0000 0001&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Shift all bits one to the left, then save it in &amp;#39;mask&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//      mask = 0 ...23 0&amp;#39;s... 0000 0010&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Shift again&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//      mask = 0 ...23 0&amp;#39;s... 0000 0100&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// and so on. until that lone &amp;#39;1&amp;#39; is shifted all&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the way to the end (left), after that it is simply&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// shifted out of existence. Then only 0&amp;#39;s are left.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// When this happens &lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// is true and the loop exits&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This loop generates a variable (&lt;code&gt;mask&lt;/code&gt;) that will only contain &amp;#39;0&amp;#39;s except for one &amp;#39;1&amp;#39;, this &amp;#39;1&amp;#39; will also be in every location on the variable only once. This is great news.&lt;/p&gt;

&lt;p&gt;Basically the location of the &amp;#39;1&amp;#39; in &lt;code&gt;mask&lt;/code&gt; decides which bit of &lt;code&gt;header&lt;/code&gt; to use. &lt;/p&gt;

&lt;div class=&quot;message&quot;&gt;This first loop encodes the &lt;code&gt;header&lt;/code&gt; variable into the image which is a lot like encoding the actual message, this is done in the second loop. &lt;code&gt;header&lt;/code&gt; just contains the length of the message, which the program needs to know for later decoding. &lt;/div&gt;

&lt;p&gt;This can be done by using a bitwise AND. Bitwise AND (&lt;code&gt;&amp;amp;&lt;/code&gt;) takes two bits and outputs one. If both these bits are &amp;#39;1&amp;#39; it will output &amp;#39;1&amp;#39;, otherwise the output will be &amp;#39;0&amp;#39;. Because &lt;code&gt;mask&lt;/code&gt; moves its &amp;#39;1&amp;#39; along to the left, we can get each bit of &lt;code&gt;header&lt;/code&gt; from doing &lt;code&gt;header &amp;amp; mask&lt;/code&gt; in this loop:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;           &lt;span class=&quot;mo&quot;&gt;000000000001&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;010100110101&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;---------------&lt;/span&gt;
               &lt;span class=&quot;mo&quot;&gt;000000000001&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;mo&quot;&gt;000000000010&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;010100110101&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;---------------&lt;/span&gt;
               &lt;span class=&quot;mo&quot;&gt;000000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwords we want to remove the least significant bit from the pixel:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;          &lt;span class=&quot;mi&quot;&gt;111111111110&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101010111001&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;---------------&lt;/span&gt;
               &lt;span class=&quot;mi&quot;&gt;101010111000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we fuse the two together with bitwise OR (&lt;code&gt;|&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;mo&quot;&gt;000000000001&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101010111000&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;---------------&lt;/span&gt;
                        &lt;span class=&quot;mi&quot;&gt;101010111001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;message&quot;&gt;Keep in mind that the binary in the examples above is actually much longer.&lt;/div&gt;

&lt;p&gt;The same thing in C++ &amp;amp; Qt:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;        &lt;span class=&quot;n&quot;&gt;QRgb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;QRgb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally to keep iterating through the image left to right and top to bottom, we write this at the end of the loop:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The encoding process is mostly the same for the actual message, except now there is an outer loop that iterates through each character of the message, then an inner loop which encodes the character into 16 pixels of the image. Because the header was an &lt;code&gt;int&lt;/code&gt; it took up 32 bits and used 32 pixels. To make sure each character only uses 16 pixels, &lt;code&gt;mask&lt;/code&gt; is changed from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;ushort&lt;/code&gt;, a variable that only takes up 16 bits of space. Because a &lt;code&gt;ushort&lt;/code&gt; is only 16 bits long, and &lt;code&gt;mask&lt;/code&gt; is shifted one bit every iteration, the inner loop will run out after 16 iterations, encoding 16 pixels.&lt;/p&gt;

&lt;h2&gt;The final code:&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span class=&quot;n&quot;&gt;QImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encodeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;QImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitsPerPixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;QRgb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;QRgb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QChar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ushort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;QRgb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;QRgb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;This is so Meta&lt;/h1&gt;

&lt;p&gt;To come full circle, here is Andy again, except this time this &lt;strong&gt;entire&lt;/strong&gt; post is encoded into him:&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/media/2014-08-04-stickshifts-n-safetybelts/andy-encoded-alot.png&quot; alt=&quot;This image contains the &lt;b&gt;entire&lt;/b&gt; post.&quot; /&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;This image contains the &lt;b&gt;entire&lt;/b&gt; post.&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&amp;mdash; Michael&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Heavy Duty Motion Detector: Part I</title>
   <link href="https://illegalprime.github.io//blog/hdmd-rectifier"/>
   <updated>2014-08-01T00:00:00-05:00</updated>
   <id>https://illegalprime.github.io//blog/hdmd-rectifier</id>
   <content type="html">&lt;h1&gt;The Idea&lt;/h1&gt;

&lt;p&gt;THE HEAVY DUTY MOTION DETECTOR can detect any human or wild animal that is not asleep, and also not strictly not asleep. The documentation isn&amp;#39;t written well. On motion detection it will switch on an outlet, which could power any appliance (most likely a lamp or a toaster)! &lt;/p&gt;

&lt;p&gt;I say this because it only detects infrared wavelengths of 7 to 14 nanometers (waves emitted near the human body temperature) and objects moving faster than 1 m/s. &lt;/p&gt;

&lt;p&gt;It is completely modular! So more large elements, like delays, monostables, and flip flops can be added at anytime. I&amp;#39;m pretty tempted to add these along with a clock circuit for a strobe light!&lt;/p&gt;

&lt;h2&gt;Why?&lt;/h2&gt;

&lt;p&gt;Long ago the lightswitch in my closet broke, forcing me to use the pull chain switch to bring light to my otherwise dim clothes. As I stood there in my shame pulling a string of yarn I had tied to lengthen the chain, I realized there was a better way.&lt;/p&gt;

&lt;h3&gt;A Better Way&lt;/h3&gt;

&lt;p&gt;Tying the yarn to a hook on the inside of my closet door pulled the light on as I pulled the door open. &lt;/p&gt;

&lt;p&gt;BAM! Automatic light. I though WOW. I made it. &lt;/p&gt;

&lt;h3&gt;Sounded Better In My Head&lt;/h3&gt;

&lt;p&gt;It didn&amp;#39;t work. I would have to close the door on myself while still in the closet to reset the switch, and I did not have the energy to swing doors back and forth all day.&lt;/p&gt;

&lt;h1&gt;To Rectify the Situation&lt;/h1&gt;

&lt;p&gt;Bad puns aside, I decided I would go ahead and try to make an automatic light with the help of my Grandfather, &lt;a href=&quot;http://patents.justia.com/inventor/robert-s-kasimov&quot;&gt;Robert Kasimov&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First there needed to be a power supply to power the sensor and the relay. This meant building a AC/DC converter to transform 120V AC to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;12-15V @ 35mA DC for the &lt;a href=&quot;http://www.radioshack.com/product/index.jsp?productId=20875286&quot;&gt;Relay&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;3.3-5V @ 800&amp;mu;A DC for the &lt;a href=&quot;http://www.radioshack.com/product/index.jsp?productId=28386046&quot;&gt;PIR Sensor&lt;/a&gt; (both from RadioShack)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and for the record I don&amp;#39;t recommend getting anything at RadioShack: their selection is really very limited and at my location at least nothing is ever in order. This is the only circuit component place in Nashville though.&lt;/p&gt;

&lt;p&gt;Our work on Part I is as follows:&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/media/hdmd-acdc-converter/circuit.png&quot; alt=&quot;Here is the AC/DC Converter Circuit Schematic&quot; width=&quot;100%&quot; /&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;Here is the AC/DC Converter Circuit Schematic&lt;/blockquote&gt;&lt;/div&gt;

Now the first 1&amp;mu;F capacitor is there to limit the current of our circuit to be close to 35mA, it provides an impedance that results in a current I:

&lt;br/&gt;&lt;br/&gt;
&lt;div&gt;&lt;img src=&quot;/media/hdmd-acdc-converter/mathsForCapacitor.png&quot; alt=&quot;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The small resistor is there to guarantee that when the capacitor is charging and discharging quickly a huge current won&amp;#39;t accompany it. &lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/media/hdmd-acdc-converter/cover.jpg&quot; alt=&quot;And the end product!&quot; width=&quot;100%&quot; /&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;And the end product!&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;Hey! Michael! That end product has more components than the schematic. What you tryin to pull?&lt;/p&gt;

&lt;p&gt;Well I didn&amp;#39;t have Zener diodes with enough voltage so I used one that is about 10V and another that is 3.3V. To bump the 3.3V to a safer 4.5V, I padded it with two normal diodes adding 0.6V each to the sum:&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/media/hdmd-acdc-converter/diode-hack.png&quot; alt=&quot;Diode Hack&quot; /&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;Diode Hack&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;Finally, here is the PCB layout I made for the circuit, you can download the netlist data for the entire project &lt;a href=&quot;/media/hdmd-acdc-converter/ThreeBoards.cir&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/media/hdmd-acdc-converter/acdc-board.png&quot; alt=&quot;Board is about 55x23 mm&quot; /&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;Board is about 55x23 mm&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&amp;mdash; Michael&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My name is Mike India Kilo Echo</title>
   <link href="https://illegalprime.github.io//blog/phonetic-alphabet"/>
   <updated>2014-07-20T00:00:00-05:00</updated>
   <id>https://illegalprime.github.io//blog/phonetic-alphabet</id>
   <content type="html">&lt;h3&gt;My personal phonetic alphabet that I use to clarify all misunderstandings when I try to spell tricky things like &amp;quot;Michael&amp;quot; over the phone:&lt;/h3&gt;

&lt;table&gt;
    &lt;tr&gt;&lt;th&gt;_&lt;/th&gt;&lt;th&gt;as in...&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;Are&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;Bdellium&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;Czar&lt;/td&gt;&lt;td&gt;D&lt;/td&gt;&lt;td&gt;Djibouti or Richard&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;E&lt;/td&gt;&lt;td&gt;Euphoria&lt;/td&gt;&lt;td&gt;F&lt;/td&gt;&lt;td&gt;Fraise&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;G&lt;/td&gt;&lt;td&gt;Gnome&lt;/td&gt;&lt;td&gt;H&lt;/td&gt;&lt;td&gt;Heir&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;I&lt;/td&gt;&lt;td&gt;Illicit&lt;/td&gt;&lt;td&gt;J&lt;/td&gt;&lt;td&gt;Jalapeno&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;K&lt;/td&gt;&lt;td&gt;Knight&lt;/td&gt;&lt;td&gt;L&lt;/td&gt;&lt;td&gt;the silent L in Llama&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;Mnemonic&lt;/td&gt;&lt;td&gt;N&lt;/td&gt;&lt;td&gt;Nee&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;O&lt;/td&gt;&lt;td&gt;Ouija Board&lt;/td&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;Pterodactyl&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Q&lt;/td&gt;&lt;td&gt;Qat&lt;/td&gt;&lt;td&gt;R&lt;/td&gt;&lt;td&gt;R you sure?&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;Sea&lt;/td&gt;&lt;td&gt;T&lt;/td&gt;&lt;td&gt;Tsunami&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;U&lt;/td&gt;&lt;td&gt;Urushiol&lt;/td&gt;&lt;td&gt;V&lt;/td&gt;&lt;td&gt;&#39;v&#39; will!&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;W&lt;/td&gt;&lt;td&gt;Write&lt;/td&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;Xylophone&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Y&lt;/td&gt;&lt;td&gt;You&lt;/td&gt;&lt;td&gt;Z&lt;/td&gt;&lt;td&gt;Zhou&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&amp;mdash; Michael&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Natural Timing: A Portal 2 Custom Map</title>
   <link href="https://illegalprime.github.io//blog/natural-timing-portal2"/>
   <updated>2014-07-19T00:00:00-05:00</updated>
   <id>https://illegalprime.github.io//blog/natural-timing-portal2</id>
   <content type="html">&lt;h2&gt;Available for download &lt;a href=&quot;http://steamcommunity.com/sharedfiles/filedetails/?id=278962722&quot;&gt;here&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;&amp;#39;Natural Timing&amp;#39; is my first custom map for Portal 2, it&amp;#39;s not very polished as it wasn&amp;#39;t done with the Hammer Editor, but it is, I think, a very solid puzzle. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://store.steampowered.com/app/620/&quot;&gt;Portal 2&lt;/a&gt; is my favorite puzzle game of all time, for those of you who don&amp;#39;t know, it&amp;#39;s incredibly funny and just hard enough to make me feel smart. I highly recommend it.&lt;/p&gt;

&lt;p&gt;The map is basically a few experiments with ways to force a player to act quickly without the use of timers. Along with this it also features a few tricks that weren&amp;#39;t in the original Portal games (one cool one especially).&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve solved it before, and so has one other friend, so please do not get discouraged or worse yet feel that it&amp;#39;s impossible. It might also be a piece of cake, and we could be the dumb ones.&lt;/p&gt;

&lt;p&gt;&amp;mdash; Michael&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
 &lt;div&gt;&lt;img src=&quot;/media/2014-07-19-natural-timing-portal2/Cake-2.png&quot; alt=&quot;&quot; width=&quot;auto&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Launch</title>
   <link href="https://illegalprime.github.io//blog/launch"/>
   <updated>2014-07-16T00:00:00-05:00</updated>
   <id>https://illegalprime.github.io//blog/launch</id>
   <content type="html">&lt;h1&gt;Website Launch&lt;/h1&gt;

&lt;p&gt;This is my website. Right.&lt;/p&gt;

&lt;h2&gt;1&lt;/h2&gt;

&lt;p&gt;Hopefully all the projects that I&amp;#39;ve worked on and will work on will eventually find their way here, so both everyone else and I can benefit from them. &lt;/p&gt;

&lt;p&gt;Of these posts will include stories, humour, circuits, programs, hacking tutorials and most important of all Go-Karts (if someone is willing to fund that).&lt;/p&gt;

&lt;p&gt;Never in my life have I attempted to remember and chronicle the things I&amp;#39;ve done, and I&amp;#39;m pretty sure my life&amp;#39;s been interesting so far, so I encourage you to read on, and check back frequently.&lt;/p&gt;

&lt;p&gt;Hopefully I will establish an RSS feed or something similar in the near future, although I can&amp;#39;t find anyone who uses them anymore, and &lt;a href=&quot;http://www.google.com/reader/about/&quot;&gt;Google Reader has been discontinued&lt;/a&gt;. Shame.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One&lt;/strong&gt; thing I will promise about this website that I will post original things, no posting a popular xkcd comic a few times a month and hoping it&amp;#39;ll reel in some hits. I also will not post to bother you kind readers about politics or my agenda, &lt;em&gt;THAT&lt;/em&gt; is what Reddit and &lt;a href=&quot;https://www.youtube.com/watch?v=xjOxNiHUsZw&quot;&gt;College Humour&lt;/a&gt; are doing these days. &lt;/p&gt;

&lt;p&gt;Oh damn I just did it.&lt;/p&gt;

&lt;p&gt;DON&amp;#39;T CLICK ON THAT LINK!&lt;/p&gt;

&lt;h2&gt;2&lt;/h2&gt;

&lt;p&gt;I am also trying to make money to be able to see my girlfriend at MIT, so I am saving some funds for plane tickets.&lt;/p&gt;

&lt;p&gt;I will send unsuspecting people here, and hopefully they can find me some odd jobs to do, &lt;em&gt;this&lt;/em&gt;, this is it. These are my only skills.&lt;/p&gt;

&lt;p&gt;So please, come for the original (guaranteed) and interesting (eh) posts, and if you ever need a personal tech guy, I&amp;#39;m your man.&lt;/p&gt;

&lt;p&gt;Thank you.
&amp;mdash; Michael Eden&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>This GitHub IO Page uses Thinny 2 &amp; Jekyll</title>
   <link href="https://illegalprime.github.io//blog/thinny-2"/>
   <updated>2014-01-22T00:00:00-06:00</updated>
   <id>https://illegalprime.github.io//blog/thinny-2</id>
   <content type="html">&lt;h1&gt;A Word from the Creator of Thinny 2&lt;/h1&gt;

&lt;p&gt;Three months ago, I released an (unfinished) theme for Ghost 0.3: &lt;a href=&quot;http://github.com/camporez/Thinny&quot;&gt;Thinny 0.3&lt;/a&gt;, codename &amp;quot;&lt;a href=&quot;http://nikita2010.wikia.com/wiki/Alexandra_Udinov&quot;&gt;Alexandra&lt;/a&gt;&amp;quot;.
But now I&amp;#39;m migrating my blog to Jekyll, and also migrating the theme. With a brand new look, Thinny 2 also brings a lot of new features and polishment. Actually, it was completely remaked.&lt;/p&gt;

&lt;h1&gt;Thinny 2.0, codename &amp;quot;&lt;a href=&quot;http://memoriaglobo.globo.com/programas/entretenimento/novelas/caras-bocas/caras-bocas-bianca-isabelle-drummond.htm&quot;&gt;Bianca&lt;/a&gt;&amp;quot;&lt;/h1&gt;

&lt;p&gt;This new version of Thinny goes deeper with the &lt;a href=&quot;http://ghost-camporez.rhcloud.com/making-applications-icon-smaller-on-gnome-shells-top-panel/&quot;&gt;initial idea&lt;/a&gt; of a big image before the post. As the saying goes, &lt;cite&gt;a picture is worth a thousand words&lt;/cite&gt;, so we expanded the concept. I mean, literally. The post image (or video!) is now full width and full height, and can be easily add with the use of a variable.&lt;/p&gt;

&lt;h2&gt;Features&lt;/h2&gt;

&lt;h3&gt;Lists and text formatting&lt;/h3&gt;

&lt;p&gt;You can use various HTML tags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Citations, like &lt;cite&gt;&amp;mdash; Michael Eden&lt;/cite&gt;, should use &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Messages, code and images&lt;/h3&gt;

&lt;div class=&quot;message&quot;&gt;This is a &lt;strong&gt;warning&lt;/strong&gt; message. Now, you can keep falling in love with this theme...&lt;/div&gt;

&lt;p&gt;You can add &lt;code&gt;code elements&lt;/code&gt; with highlight support:
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/media/2014-01-22-thinny-2/bianca.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;100&amp;#37;&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Image captions are supported out of the box. Brilliant!&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Will output this:&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/media/2014-01-22-thinny-2/bianca.jpg&quot; alt=&quot;Image captions are supported out of the box. Brilliant!&quot; width=&quot;100%&quot; /&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;Image captions are supported out of the box. Brilliant!&lt;/blockquote&gt;&lt;/div&gt;

&lt;h3&gt;Table&lt;/h3&gt;

&lt;p&gt;Thinny also support html tag &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;:
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Version&lt;/th&gt;
      &lt;th&gt;Codename&lt;/th&gt;
      &lt;th&gt;Platform&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/camporez/Thinny/releases/tag/v0.3-alexandra&quot;&gt;0.3&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://nikita2010.wikia.com/wiki/Alexandra_Udinov&quot;&gt;Alexandra&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Ghost 0.3.x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/camporez/Thinny/releases/tag/v2.0-bianca&quot;&gt;2.0&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://memoriaglobo.globo.com/programas/entretenimento/novelas/caras-bocas/caras-bocas-bianca-isabelle-drummond.htm&quot;&gt;Bianca&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Jekyll&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2.1&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://lesmiserables.wikia.com/wiki/Cosette&quot;&gt;Cosette&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Jekyll&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;h3&gt;Mobile version&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Coming soon...&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Quote&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you liked it? You can &lt;a href=&quot;https://github.com/camporez/Thinny/releases&quot;&gt;download Thinny on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/camporez/camporez.github.io/issues/new&quot;&gt;Open an issue&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 

</feed>
